#pragma once

#include <stdbool.h>

typedef struct Node {
    int number;
    char symbol;
    struct Node* leftChild;
    struct Node* rightChild;
} Node;

// Функция создает дерево - точнее, его первый узел. Возвращает указатель на данный узел.
Node* createNode();

// Функция очищает память, выделенную по данный узел. Принимает указатель на узел.
void deleteNode(Node* node);

// Функция удаляет все дерево. Очищает память, выделенную под него.
// Принимает указатель на корень дерева.
void deleteParseTree(Node* root);

// Функция выполняет прямой обход дерева и записывает в строку результат обхода.
// Функция принимает указатель на корень дерева,
// указатель на счетчик чисел, которые функция уже добавила в строку
// (необходим для правильной расстановки скобок), также функция принимает строку,
// в которую будет записывать результат, и указатель на индекс этой строки.
// Кроме того функция принимает указатель на счетчик незакрытых скобок - необходимо
// для соблюдения скобочного баланса в получившейся строке.
void prefixTraverse(Node* parseTree, int* countOfNumbers,
    char* stringForResult, int* indexForString, int* countOfBrackets);

// Функция дописывает необходимое кол-во скобок в конец строки.
// Принимает строку, указатель на индекс строки
// и указатель на кол-во незакрытых скобок в строке.
void addMissingBrackets(char* stringForResult, int* indexForString, int* countOfBrackets);

// Функция добавляет в строку данный элемент (вместе с пробелом или без).
// Функция принимает строку, в которую нужно добавить символ, указатель на индекс этой строки,
// сам символ, который нужно добавить, и вариант добавления:
// true - добавить с последующим пробелом, false - без пробела.
void addToString(char* string, int* indexForString, char symbolToAdding, bool spaceOption);

// Функция проверяет, является ли данный символ цифрой.
bool isNumberInString(char symbol);

// Функция проверяет, является ли данный символ оператором.
bool isOperatorInString(char symbol);

// Функция строит дерево разбора арифметического выражения.
// Принимает строку с арифметическим выражением и индекс элемента в строке.
// Функция возвращает указатель на корень созданного дерева.
Node* createNewNodeForParseTree(char* stringOfNumbersAndOperators, int* index);

// Функция вычисляет значение выражения, выполняя обход по дереву.
// Функция принимает указатель на корень дерева, а также указатель на переменную,
// которая сигнализирует о делении на ноль.
int calculateParseTree(Node* tree, bool* checkOfDivisionByZero);