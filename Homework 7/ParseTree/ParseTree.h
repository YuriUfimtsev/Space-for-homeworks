#pragma once

#include <stdbool.h>

typedef struct Node {
    int key;
    char symbol;
    struct Node* leftChild;
    struct Node* rightChild;
} Node;

// Функция создает дерево - точнее, его первый узел. Возвращает указатель на данный узел.
Node* createNode();

// Функция очищает память, выделенную по данный узел. Принимает указатель на узел.
void deleteNode(Node* node);

// Функция удаляет все дерево. Очищает память, выделенную под него.
// Принимает указатель на корень дерева.
void deleteTree(Node* root);

// Функция выполняет прямой обход дерева и выводит на экран его элементы.
// Функция принимает указатель на корень дерева,
// а также указатель на счетчик чисел, которые функция уже вывела на экран
// (необходим для правильной расстановки скобок)
void prefixTraverse(Node* tree, int* countOfNumbers);

//Функция проверяет, является ли данный символ цифрой.
bool isNumberInString(char symbol);

// Функция проверяет, является ли данный символ оператором.
bool isOperatorInString(char symbol);

// Функция строит дерево разбора арифметического выражения.
// Принимает строку с арифметическим выражением и индекс элемента в строке.
// Функция возвращает указатель на корень созданного дерева.
Node* createNewNodeForParseTree(char* stringOfNumbersAndOperators, int* index);

// Функция вычисляет значение выражения, выполняя обход по дереву.
// Функция принимает указатель на корень дерева, а также указатель на переменную,
//  которая сигнализирует о делении на ноль.
int calculateParseTree(Node* tree, bool* checkOfDivisionByZero);