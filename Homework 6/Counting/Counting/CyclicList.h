#pragma once

#include <stdbool.h>

typedef struct cyclicList cyclicList;

typedef struct Position Position;

// Функция создает список - возвращает указатель на начало списка.
cyclicList* createCyclicList();

// Функция удаляет список. Принимает на вход указатель на голову списка.
void deleteCyclicList(cyclicList* cyclicList);

// Функция удаляет элемент в списке.
// Принимает на вход указатель на элемент списка.
void deletePosition(Position* position);

// Функция добавляет элемент со значением value в конец списка.
// Принимает на вход указатель на голову списка.
void add(cyclicList* cyclicList, int value);

// Функция добавляет элемент со значением value в список (после элемента с указателем position).
// Функция принимает на вход указатель на голову списка, указатель на элемент,
// после которого нужно добавить новый элемент в список, значение value, которое нужно добавить в список.
void addByPosition(cyclicList* cyclicList, Position* position, int value);

// Функция возвращает указатель на первый элемент списка. Принимает указатель на голову списка.
Position* first(cyclicList* cyclicList);

// Функция возвращает указатель на следующий элемент списка. Принимает указатель на текущий элемент списка.
void next(Position* position);

// Функция возвращает true, если передаваемое значение
// - указатель на элемент списка - является указателем на последний элемент списка.
// false - если передаваемое значение - указатель на элемент списка - не является указателем на последний элемент списка.
bool last(Position* position, cyclicList* cyclicList);

// Функция возвращает значение value, лежащее в данном элементе списка.
// Функция принимает указатель на голову списка и указатель на элемент списка.
int getValue(cyclicList* cyclicList, Position* position);

// Функция проверяет, есть ли в списке элемент с данным значением value.
// Функция принимает указатель на голову списка и значение value.
// Возвращает true, если элемент с таким значением присутсвует в списке.
// Возвращает false, если элемент с таким значением отсутствует в списке.
bool valueInCyclicList(cyclicList* cyclicList, int value);

// Функция вычисляет размер списка (количество элементов).
// Принимает на вход указатель на голову списка.
// Возвращает размер списка.
int sizeOfCyclicList(cyclicList* cyclicList);

// Функция удаляет элемент со значением value из списка.
// Функция принимает указатель на голову списка и значение value, которое надо убрать из списка.
// Функция возвращает true, если элемент со значением value удален.
// Функция возвращает false, если элемента со значением value в списке нет.
bool delete(cyclicList* cyclicList, int value);